{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './App.css';\nimport Header from \"./Header.js\";\nimport Main from \"./MainWithClass.js\";\nimport ThemeContext from './ThemeContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const themeHook = useState(\"light\"); //const theme = \"light\"; //using themehook for toogle functionality\n\n  return (\n    /*#__PURE__*/\n    // Once the ThemeContext has been imported, we have to enclose the contents of our App component in ThemeContext.Provider tags and give the \n    //ThemeContext.Provider component a props called value which will contain the data we want to make available to our component tree.\n    _jsxDEV(ThemeContext.Provider, {\n      value: themeHook,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"Sngm/XjIKK7HRHvZ/RoKc6H5oSE=\");\n\n_c = App;\nexport default App; //Notes\n//To make this context available to all our React components, we have to use a Provider.\n// What is a Provider? According to the React documentation, every context object comes with a Provider React component that allows consuming components to subscribe to context changes. \n//It is the provider that allows the context to be consumed by other components. \n//That said, let us create our provider.\n//Now, we will create our theme file that will contain the different color values for both our light and dark themes. \n//Create a file in your /src folder called Colors.js.\n//PArt3 \n//writing the toggle component for toggle functionality\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/App.js"],"names":["React","useState","Header","Main","ThemeContext","App","themeHook"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAkB,oBAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,SAAS,GAAGL,QAAQ,CAAC,OAAD,CAA1B,CAFa,CAGb;;AACA;AAAA;AACC;AACA;AACC,YAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAEK,SAA9B;AAAA,6BACE;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAHF;AAWD;;GAfQD,G;;KAAAA,G;AAiBT,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA","sourcesContent":["import React, {useState} from \"react\";\n\nimport './App.css';\nimport Header from \"./Header.js\";\nimport Main from  \"./MainWithClass.js\";\nimport ThemeContext from './ThemeContext.js';\n\nfunction App() {\n\n  const themeHook = useState(\"light\");\n  //const theme = \"light\"; //using themehook for toogle functionality\n  return (\n   // Once the ThemeContext has been imported, we have to enclose the contents of our App component in ThemeContext.Provider tags and give the \n   //ThemeContext.Provider component a props called value which will contain the data we want to make available to our component tree.\n    <ThemeContext.Provider value={themeHook}>\n      <div>\n        <Header/>\n        <Main/>\n\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n\n//Notes\n//To make this context available to all our React components, we have to use a Provider.\n// What is a Provider? According to the React documentation, every context object comes with a Provider React component that allows consuming components to subscribe to context changes. \n//It is the provider that allows the context to be consumed by other components. \n//That said, let us create our provider.\n\n//Now, we will create our theme file that will contain the different color values for both our light and dark themes. \n//Create a file in your /src folder called Colors.js.\n\n\n//PArt3 \n//writing the toggle component for toggle functionality"]},"metadata":{},"sourceType":"module"}