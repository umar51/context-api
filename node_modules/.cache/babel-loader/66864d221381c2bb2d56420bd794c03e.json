{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/MainWithFunction.js\",\n    _s = $RefreshSig$();\n\n//Consuming context with functional components is easier and less tedious than doing so with class-based components. \n//To consume context in a functional component, we will use a hook called useContext.\nimport React, { useContext } from \"react\";\nimport AppTheme from \"./Colors\";\nimport ThemeContext from \"./ThemeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const theme = useContext(ThemeContext); //passing the ThemeContext(with value \"light\") object to useContext and saving as theme object\n\n  const currentTheme = AppTheme[theme]; //passed theme object to AppTheme object in colors.js to get light theme\n\n  return (\n    /*#__PURE__*/\n    //styling main of Main component\n    _jsxDEV(\"main\", {\n      style: {\n        padding: \"1rem\",\n        backgroundColor: `${currentTheme.backgroundColor}`,\n        //used the currentTheme\n        color: `${currentTheme.textColor}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Heading 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is a paragraph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"This is a button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Main, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c = Main;\nexport default Main; //all we had to do was use our useContext hook with our ThemeContext passed in as an argument.\n//Note: You have to use these different components in the App.js file in order to see the results.\n//Next Updating Our Theme With The ThemeToggler Component\n//moving to ThemeToggler Component in ThemeToggler.js\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/MainWithFunction.js"],"names":["React","useContext","AppTheme","ThemeContext","Main","theme","currentTheme","padding","backgroundColor","color","textColor"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAMC,KAAK,GAAGJ,UAAU,CAACE,YAAD,CAAxB,CADe,CACyB;;AACxC,QAAMG,YAAY,GAAGJ,QAAQ,CAACG,KAAD,CAA7B,CAFe,CAEuB;;AAEtC;AAAA;AACI;AACA;AAAM,MAAA,KAAK,EAAE;AACTE,QAAAA,OAAO,EAAE,MADA;AAETC,QAAAA,eAAe,EAAG,GAAEF,YAAY,CAACE,eAAgB,EAFxC;AAE2C;AACpDC,QAAAA,KAAK,EAAG,GAAEH,YAAY,CAACI,SAAU;AAHxB,OAAb;AAAA,8BAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAYH,CAhBD;;GAAMN,I;;KAAAA,I;AAkBN,eAAeA,IAAf,C,CAEA;AACA;AAEA;AACA","sourcesContent":["//Consuming context with functional components is easier and less tedious than doing so with class-based components. \n//To consume context in a functional component, we will use a hook called useContext.\n\nimport React, { useContext } from \"react\";\nimport AppTheme from \"./Colors\";\nimport ThemeContext from \"./ThemeContext\"\n\n\nconst Main = () => {\n    const theme = useContext(ThemeContext); //passing the ThemeContext(with value \"light\") object to useContext and saving as theme object\n    const currentTheme = AppTheme[theme]; //passed theme object to AppTheme object in colors.js to get light theme\n\n    return(\n        //styling main of Main component\n        <main style={{\n            padding: \"1rem\",\n            backgroundColor: `${currentTheme.backgroundColor}`, //used the currentTheme\n            color: `${currentTheme.textColor}`,\n        }}>\n            <h1>Heading 1</h1>\n            <p>This is a paragraph</p>\n            <button>This is a button</button>\n        </main>\n    );\n}\n\nexport default Main;\n\n//all we had to do was use our useContext hook with our ThemeContext passed in as an argument.\n//Note: You have to use these different components in the App.js file in order to see the results.\n\n//Next Updating Our Theme With The ThemeToggler Component\n//moving to ThemeToggler Component in ThemeToggler.js"]},"metadata":{},"sourceType":"module"}