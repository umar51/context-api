{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/ThemeToggler.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport ThemeContext from \"./ThemeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst themeTogglerStyle = {\n  cursor: \"pointer\"\n};\n\nconst ThemeToggler = () => {\n  _s();\n\n  const [themeMode, setThemeMode] = useContext(ThemeContext); //Since the value of our theme context is now a hook whenever we call useContext on it, it will return an array.\n  //Using destructuring, we were able to grab the elements from the array.\n  // We then wrote an onClick event handler for our ThemeToggler.\n  //With that code, whenever the theme toggler is clicked, it will switch the theme of our application.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: themeTogglerStyle,\n    onClick: () => {\n      setThemeMode(themeMode === \"light\" ? \"dark\" : \"light\");\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        title: \"switch theme\",\n        children: themeMode === \"light\" ? \"SUN\" : \"MOON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeToggler, \"t29MRYtpr4dKaVExQx82VWov8Dw=\");\n\n_c = ThemeToggler;\nexport default ThemeToggler; //part 1\n//next CONSUMING CONTEXT WITH CLASS-BASED COMPONENTS\n//Here, we will use the value of our ThemeContext. \n//As you may already know, we have two methods of writing components in React: through functions or classes.\n// The process of use context in both methods is different \n//so we will create two components to serve as the main section of our application: MainWithClass and MainWithFunction\n//next moving to MainWithClass.js.\n//part 2\n//Now we are going to work on our ThemeToggler component. \n//We need to be able to switch between the light and dark themes. \n//To do this, we are going to need to edit our ThemeContext.js. \n//Our React.createContext will now take an object resembling the result of a useState hook as an argument.\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeToggler\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/context-api/src/ThemeToggler.js"],"names":["React","useContext","ThemeContext","themeTogglerStyle","cursor","ThemeToggler","themeMode","setThemeMode"],"mappings":";;;AAEA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,MAAM,EAAE;AADc,CAA1B;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAK,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,UAAU,CAACC,YAAD,CAA3C,CADuB,CAEvB;AACA;AACA;AACA;;AACA,sBACI;AAAK,IAAA,KAAK,EAAEC,iBAAZ;AAA+B,IAAA,OAAO,EAAK,MAAM;AAACI,MAAAA,YAAY,CAACD,SAAS,KAAI,OAAb,GAAuB,MAAvB,GAAgC,OAAjC,CAAZ;AAAsD,KAAxG;AAAA,2BACI;AAAA,6BACI;AAAM,QAAA,KAAK,EAAG,cAAd;AAAA,kBACCA,SAAS,KAAI,OAAb,GAAuB,KAAvB,GAA+B;AADhC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAfD;;GAAMD,Y;;KAAAA,Y;AAiBN,eAAeA,YAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["\n\nimport React, {useContext} from \"react\";\nimport ThemeContext from \"./ThemeContext\";\n\n\nconst themeTogglerStyle = {\n    cursor: \"pointer\"\n}\nconst ThemeToggler = () => {\n    const[themeMode, setThemeMode] = useContext(ThemeContext);\n    //Since the value of our theme context is now a hook whenever we call useContext on it, it will return an array.\n    //Using destructuring, we were able to grab the elements from the array.\n    // We then wrote an onClick event handler for our ThemeToggler.\n    //With that code, whenever the theme toggler is clicked, it will switch the theme of our application.\n    return (\n        <div style={themeTogglerStyle} onClick = { () => {setThemeMode(themeMode ===\"light\" ? \"dark\" : \"light\")}}>\n            <button>\n                <span title = \"switch theme\">\n                {themeMode ===\"light\" ? \"SUN\" : \"MOON\"}\n                </span>\n            </button>\n        </div>\n    );\n}\n\nexport default ThemeToggler;\n\n//part 1\n//next CONSUMING CONTEXT WITH CLASS-BASED COMPONENTS\n//Here, we will use the value of our ThemeContext. \n//As you may already know, we have two methods of writing components in React: through functions or classes.\n// The process of use context in both methods is different \n//so we will create two components to serve as the main section of our application: MainWithClass and MainWithFunction\n\n//next moving to MainWithClass.js.\n\n//part 2\n//Now we are going to work on our ThemeToggler component. \n//We need to be able to switch between the light and dark themes. \n//To do this, we are going to need to edit our ThemeContext.js. \n//Our React.createContext will now take an object resembling the result of a useState hook as an argument.\n\n\n"]},"metadata":{},"sourceType":"module"}